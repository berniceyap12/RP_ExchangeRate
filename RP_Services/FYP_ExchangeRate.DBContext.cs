//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/8/2020 12:09:35 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using FYP_ExchangeRateDataLyaer;

namespace FYPExchangeRateModel
{

    public partial class FYPExchangeRateContext : DbContext
    {

        public FYPExchangeRateContext() :
            base()
        {
            OnCreated();
        }

        public FYPExchangeRateContext(DbContextOptions<FYPExchangeRateContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                //this needs to be replaced with your own local SQL Server (Data Source = SQL LOCAL SERVER)
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\ProjectsV13;Initial Catalog=master;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Country> Countries
        {
            get;
            set;
        }

        public virtual DbSet<ExchangeRate> ExchangeRates
        {
            get;
            set;
        }

        public virtual DbSet<Transaction> Transactions
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Enquiry> Enquiries
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CountryMapping(modelBuilder);
            this.CustomizeCountryMapping(modelBuilder);

            this.ExchangeRateMapping(modelBuilder);
            this.CustomizeExchangeRateMapping(modelBuilder);

            this.TransactionMapping(modelBuilder);
            this.CustomizeTransactionMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.EnquiryMapping(modelBuilder);
            this.CustomizeEnquiryMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Country Mapping

        private void CountryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Country>().ToTable(@"Countries", @"ExchangeRateFYP");
            modelBuilder.Entity<Country>().Property<int>(x => x.CountryID).HasColumnName(@"CountryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Country>().Property<string>(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Country>().Property<decimal?>(x => x.CurrentCurrencyRate).HasColumnName(@"CurrentCurrencyRate").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<Country>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Country>().Property<bool?>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Country>().Property<int?>(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Country>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Country>().Property<int?>(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Country>().Property<System.DateTime?>(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Country>().HasKey(@"CountryID");
        }

        partial void CustomizeCountryMapping(ModelBuilder modelBuilder);

        #endregion

        #region ExchangeRate Mapping

        private void ExchangeRateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ExchangeRate>().ToTable(@"ExchangeRates", @"ExchangeRateFYP");
            modelBuilder.Entity<ExchangeRate>().Property<int>(x => x.ExchangeRateID).HasColumnName(@"ExchangeRateID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ExchangeRate>().Property<int?>(x => x.FromCountryID).HasColumnName(@"FromCountryID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<decimal?>(x => x.FromCountryRate).HasColumnName(@"FromCountryRate").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<int?>(x => x.ToCountryID).HasColumnName(@"ToCountryID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<decimal?>(x => x.ToCountryRate).HasColumnName(@"ToCountryRate").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ExchangeRate>().Property<bool?>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<int?>(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<int?>(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().Property<System.DateTime?>(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ExchangeRate>().HasKey(@"ExchangeRateID");
        }

        partial void CustomizeExchangeRateMapping(ModelBuilder modelBuilder);

        #endregion

        #region Transaction Mapping

        private void TransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Transaction>().ToTable(@"Transactions", @"ExchangeRateFYP");
            modelBuilder.Entity<Transaction>().Property<int>(x => x.TransactionID).HasColumnName(@"TransactionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Transaction>().Property<int?>(x => x.FromCountryID).HasColumnName(@"FromCountryID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<decimal?>(x => x.FromCountryRate).HasColumnName(@"FromCountryRate").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<int?>(x => x.ToCountryID).HasColumnName(@"ToCountryID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<decimal?>(x => x.ToCountryRate).HasColumnName(@"ToCountryRate").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<int?>(x => x.CustomerID).HasColumnName(@"CustomerID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<string>(x => x.PaymentMethod).HasColumnName(@"PaymentMethod").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property<decimal?>(x => x.InputMoneyAmount).HasColumnName(@"InputMoneyAmount").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<decimal?>(x => x.TotalCostAmount).HasColumnName(@"TotalCostAmount").HasColumnType(@"decimal(10,2)").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<bool?>(x => x.IsConfirmed).HasColumnName(@"IsConfirmed").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Transaction>().Property<bool?>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<int?>(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<int?>(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property<System.DateTime?>(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().HasKey(@"TransactionID");
        }

        partial void CustomizeTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users", @"ExchangeRateFYP");
            modelBuilder.Entity<User>().Property<int>(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property<int?>(x => x.UserType).HasColumnName(@"UserType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.Username).HasColumnName(@"Username").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<string>(x => x.Passwords).HasColumnName(@"Passwords").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<string>(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<User>().Property<bool?>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<int?>(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<int?>(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<System.DateTime?>(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<User>().HasKey(@"UserID");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Enquiry Mapping
        private void EnquiryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Enquiry>().ToTable(@"Enquiries", @"ExchangeRateFYP");
            modelBuilder.Entity<Enquiry>().Property<int>(x => x.EnquiryID).HasColumnName(@"EnquiryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Enquiry>().Property<string>(x => x.EnquirySubject).HasColumnName(@"EnquirySubject").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<Enquiry>().Property<int?>(x => x.MessageID).HasColumnName(@"MessageID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<string>(x => x.EnquiryMessage).HasColumnName(@"EnquiryMessage").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<Enquiry>().Property<int?>(x => x.CustomerID).HasColumnName(@"CustomerID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<int?>(x => x.TransactionID).HasColumnName(@"TransactionID").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<string>(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Enquiry>().Property<bool?>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<int?>(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<int?>(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().Property<System.DateTime?>(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<Enquiry>().HasKey(@"EnquiryID");
        }

        partial void CustomizeEnquiryMapping(ModelBuilder modelBuilder);
        #endregion


        #region USERS Methods Collections 
        public bool InsertNewUser(User account)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"INSERT INTO {0}.{1} ({2},{3},{4},{5},{6},{7},{8},{9},{10},{11}) 
                                                       VALUES ('{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}')",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.UsersTables,
                                                      FYPExchangeRateConstant.UsersColumn.UserType, FYPExchangeRateConstant.UsersColumn.Username,
                                                      FYPExchangeRateConstant.UsersColumn.Passwords, FYPExchangeRateConstant.UsersColumn.EmailAddress,
                                                      FYPExchangeRateConstant.UsersColumn.Remarks, FYPExchangeRateConstant.UsersColumn.IsActive,
                                                      FYPExchangeRateConstant.UsersColumn.CreatedBy, FYPExchangeRateConstant.UsersColumn.CreatedDate,
                                                      FYPExchangeRateConstant.UsersColumn.ModifiedBy, FYPExchangeRateConstant.UsersColumn.ModifiedDate,
                                                      account.UserType, account.Username, account.Passwords, account.EmailAddress, account.Remarks, 1, 1, DateTime.Now, 1, DateTime.Now);
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool UpdateUser(User account)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"Update {0}.{1}
                                                      SET {2} = '{3}', 
                                                          {4} = '{5}',
                                                          {6} = '{7}', {8} = '{9}', {10} = '{11}', {12} = '{13}'
                                                      WHERE {14} = '{15}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.UsersTables,
                                                      FYPExchangeRateConstant.UsersColumn.UserType, account.UserType,
                                                      FYPExchangeRateConstant.UsersColumn.Username, account.Username,
                                                      FYPExchangeRateConstant.UsersColumn.EmailAddress, account.EmailAddress,
                                                      FYPExchangeRateConstant.UsersColumn.Passwords, account.Passwords,
                                                      FYPExchangeRateConstant.UsersColumn.Remarks, account.Remarks,
                                                      FYPExchangeRateConstant.UsersColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.UsersColumn.UserID, account.UserID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool DeleteUser(User account)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"Update {0}.{1}
                                                      SET {2} = {3}, 
                                                          {4} = '{5}'
                                                      WHERE {6} = '{7}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.UsersTables,
                                                      FYPExchangeRateConstant.UsersColumn.IsActive, 0,
                                                      FYPExchangeRateConstant.UsersColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.UsersColumn.UserID, account.UserID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<User> SignIn(User account)
        {
            List<User> result = new List<User>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format("SELECT * FROM {0}.{1} WHERE {2} = '{3}' AND {4} = '{5}' and {6}= 1", FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.UsersTables, 
                                                                                                 FYPExchangeRateConstant.UsersColumn.Username, account.Username, FYPExchangeRateConstant.UsersColumn.Passwords, 
                                                                                                 account.Passwords, FYPExchangeRateConstant.UsersColumn.IsActive);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            User row = new User();
                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.UserID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserID)))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.Username) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Username)))
                                row.Username = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Username)), typeof(string));
                            else
                                row.Username = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.UserType) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserType)))
                                row.UserType = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserType)), typeof(int));
                            else
                                row.UserType = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<User> SelectAllUsers()
        {
            List<User> result = new List<User>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format("SELECT * FROM {0}.{1}", FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.UsersTables);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            User row = new User();
                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.UserID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserID)))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.Username) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Username)))
                                row.Username = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Username)), typeof(string));
                            else
                                row.Username = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.Passwords) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Passwords)))
                                row.Passwords = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Passwords)), typeof(string));
                            else
                                row.Passwords = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.EmailAddress) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.EmailAddress)))
                                row.EmailAddress = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.EmailAddress)), typeof(string));
                            else
                                row.EmailAddress = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.UserType) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserType)))
                                row.UserType = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.UserType)), typeof(int));
                            else
                                row.UserType = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.UsersColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }
        #endregion

        #region Country Methods Collections
        public bool InsertNewCountry(Country country)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"INSERT INTO {0}.{1} ({2},{3},{4},{5},{6},{7},{8},{9}) 
                                                       VALUES ('{10}',{11},'{12}','{13}','{14}','{15}','{16}','{17}')",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables,
                                                      FYPExchangeRateConstant.CountriesColumn.CountryName, 
                                                      FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate, 
                                                      FYPExchangeRateConstant.CountriesColumn.Remarks, FYPExchangeRateConstant.CountriesColumn.IsActive,
                                                      FYPExchangeRateConstant.CountriesColumn.CreatedBy, FYPExchangeRateConstant.CountriesColumn.CreatedDate,
                                                      FYPExchangeRateConstant.CountriesColumn.ModifiedBy, FYPExchangeRateConstant.CountriesColumn.ModifiedDate,
                                                      country.CountryName, country.CurrentCurrencyRate, country.Remarks, 1, 1, DateTime.Now, 1, DateTime.Now);
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool UpdateCountry(Country country)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"Update {0}.{1}
                                                      SET {2} = '{3}', 
                                                          {4} = {5},
                                                          {6} = '{7}',
                                                          {8} = '{9}'
                                                      WHERE {10} = '{11}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables,
                                                      FYPExchangeRateConstant.CountriesColumn.CountryName, country.CountryName,
                                                      FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate, country.CurrentCurrencyRate,
                                                      FYPExchangeRateConstant.CountriesColumn.Remarks, country.Remarks,
                                                      FYPExchangeRateConstant.CountriesColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.CountriesColumn.CountryID, country.CountryID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool DeleteCountry(Country country)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"Update {0}.{1}
                                                      SET {2} = '{3}', 
                                                          {4} = '{5}'
                                                      WHERE {6} = '{7}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables,
                                                      FYPExchangeRateConstant.CountriesColumn.IsActive, 0,
                                                      FYPExchangeRateConstant.CountriesColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.CountriesColumn.CountryID, country.CountryID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<Country> SelectAllCountries()
        {
            List<Country> result = new List<Country>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format("SELECT * FROM {0}.{1}", FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            Country row = new Country();
                            if (fieldNames.Contains(FYPExchangeRateConstant.CountriesColumn.CountryID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CountryID)))
                                row.CountryID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CountryID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.CountriesColumn.CountryName) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CountryName)))
                                row.CountryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CountryName)), typeof(string));
                            else
                                row.CountryName = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate)))
                                row.CurrentCurrencyRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate)), typeof(decimal));
                            else
                                row.CurrentCurrencyRate = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.CountriesColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.UsersColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.CountriesColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.CountriesColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }
        #endregion

        #region ExchangeRate Collections
        public bool InsertNewExchangeRate(ExchangeRate rate)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"INSERT INTO {0}.{1} ({2},{3},{4},{5},{6},{7},{8},{9},{10},{11}) 
                                                       VALUES ('{12}',{13},'{14}',{15},'{16}','{17}','{18}','{19}','{20}','{21}')",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRatesTables,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryRate,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryRate,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.Remarks, FYPExchangeRateConstant.ExchangeRatesColumn.IsActive,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.CreatedBy, FYPExchangeRateConstant.ExchangeRatesColumn.CreatedDate,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ModifiedBy, FYPExchangeRateConstant.ExchangeRatesColumn.ModifiedDate,
                                                      rate.ToCountryID, rate.ToCountryRate, rate.FromCountryID, rate.FromCountryRate, rate.Remarks, 1, 1, DateTime.Now, 1, DateTime.Now);
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool UpdateExchangeRate(ExchangeRate rate)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"Update {0}.{1}
                                                      SET {2} = '{3}', 
                                                          {4} = {5},
                                                          {6} = '{7}',
                                                          {8} = {9},
                                                          {10} = '{11}',
                                                          {12} = '{13}'
                                                      WHERE {14} = '{15}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRatesTables,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID, rate.FromCountryID,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryRate, rate.FromCountryRate,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID, rate.ToCountryID,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryRate, rate.ToCountryRate,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.Remarks, rate.Remarks,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ExchangeRateID, rate.ExchangeRateID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool DeleteExchangeRate(ExchangeRate rate)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"DELETE FROM {0}.{1} 
                                                      WHERE {2} = '{3}'",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRatesTables,
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.ExchangeRateID, rate.ExchangeRateID
                                                   );
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<ExchangeRate> SelectAllExchangeRate()
        {
            List<ExchangeRate> result = new List<ExchangeRate>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"select rate.*, countryFrom.CountryName 'CompanyFrom', countryTo.CountryName 'CompanyTo' 
                                                      from {0}.{1}(nolocK) rate
                                                      left join {0}.{2}(nolocK) countryFrom on countryFrom.{3} = rate.{4}
                                                      left join {0}.{2}(nolocK) countryTo on countryTo.{3} = rate.{5}", 
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRatesTables,
                                                      FYPExchangeRateConstant.CountriesTables, FYPExchangeRateConstant.CountriesColumn.CountryID, 
                                                      FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID, FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            ExchangeRate row = new ExchangeRate();
                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.ExchangeRateID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ExchangeRateID)))
                                row.ExchangeRateID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ExchangeRateID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID)))
                                row.FromCountryID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryID)), typeof(int));
                            else
                                row.FromCountryID = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID)))
                                row.ToCountryID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryID)), typeof(int));
                            else
                                row.ToCountryID = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryRate) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryRate)))
                                row.FromCountryRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.FromCountryRate)), typeof(decimal));
                            else
                                row.FromCountryRate = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryRate) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryRate)))
                                row.ToCountryRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.ToCountryRate)), typeof(decimal));
                            else
                                row.ToCountryRate = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains("CompanyFrom") && !reader.IsDBNull(reader.GetOrdinal("CompanyFrom")))
                                row.CountryFrom = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CompanyFrom")), typeof(string));

                            if (fieldNames.Contains("CompanyTo") && !reader.IsDBNull(reader.GetOrdinal("CompanyTo")))
                                row.CountryTo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CompanyTo")), typeof(string));

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }
        #endregion

        #region Transactions Collections
        public bool InsertNewTransactions(Transaction tran)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = string.Format(@"{0}.{1}", FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRateFYPStoredProcedure.InsertTransactions);

                    DbParameter FromCountryIDParameter = cmd.CreateParameter();
                    FromCountryIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.FromCountryID;
                    FromCountryIDParameter.Direction = ParameterDirection.Input;
                    FromCountryIDParameter.DbType = DbType.Int32;
                    FromCountryIDParameter.Precision = 10;
                    FromCountryIDParameter.Scale = 0;
                    if (tran.FromCountryID.HasValue)
                    {
                        FromCountryIDParameter.Value = tran.FromCountryID.Value;
                    }
                    else
                    {
                        FromCountryIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(FromCountryIDParameter);

                    DbParameter ToCountryIDParameter = cmd.CreateParameter();
                    ToCountryIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.ToCountryID;
                    ToCountryIDParameter.Direction = ParameterDirection.Input;
                    ToCountryIDParameter.DbType = DbType.Int32;
                    ToCountryIDParameter.Precision = 10;
                    ToCountryIDParameter.Scale = 0;
                    if (tran.ToCountryID.HasValue)
                    {
                        ToCountryIDParameter.Value = tran.ToCountryID.Value;
                    }
                    else
                    {
                        ToCountryIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(ToCountryIDParameter);

                    DbParameter CustomerIDParameter = cmd.CreateParameter();
                    CustomerIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.CustomerID;
                    CustomerIDParameter.Direction = ParameterDirection.Input;
                    CustomerIDParameter.DbType = DbType.Int32;
                    CustomerIDParameter.Precision = 10;
                    CustomerIDParameter.Scale = 0;
                    if (tran.CustomerID.HasValue)
                    {
                        CustomerIDParameter.Value = tran.CustomerID.Value;
                    }
                    else
                    {
                        CustomerIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(CustomerIDParameter);

                    DbParameter FromCountryRateParameter = cmd.CreateParameter();
                    FromCountryRateParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.FromCountryRate;
                    FromCountryRateParameter.Direction = ParameterDirection.Input;
                    FromCountryRateParameter.DbType = DbType.Decimal;
                    FromCountryRateParameter.Precision = 10;
                    FromCountryRateParameter.Scale = 2;
                    if (tran.FromCountryRate.HasValue)
                    {
                        FromCountryRateParameter.Value = tran.FromCountryRate.Value;
                    }
                    else
                    {
                        FromCountryRateParameter.Value = null;
                    }
                    cmd.Parameters.Add(FromCountryRateParameter);

                    DbParameter ToCountryRateParameter = cmd.CreateParameter();
                    ToCountryRateParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.ToCountryRate;
                    ToCountryRateParameter.Direction = ParameterDirection.Input;
                    ToCountryRateParameter.DbType = DbType.Decimal;
                    ToCountryRateParameter.Precision = 10;
                    ToCountryRateParameter.Scale = 2;
                    if (tran.ToCountryRate.HasValue)
                    {
                        ToCountryRateParameter.Value = tran.ToCountryRate.Value;
                    }
                    else
                    {
                        ToCountryRateParameter.Value = null;
                    }
                    cmd.Parameters.Add(ToCountryRateParameter);

                    DbParameter PaymentMethodParameter = cmd.CreateParameter();
                    PaymentMethodParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.PaymentMethod;
                    PaymentMethodParameter.Direction = ParameterDirection.Input;
                    PaymentMethodParameter.DbType = DbType.String;
                    PaymentMethodParameter.Size = 1000;
                    PaymentMethodParameter.Value = tran.PaymentMethod;
                    cmd.Parameters.Add(PaymentMethodParameter);

                    DbParameter InputMoneyAmountParameter = cmd.CreateParameter();
                    InputMoneyAmountParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.InputMoneyAmount;
                    InputMoneyAmountParameter.Direction = ParameterDirection.Input;
                    InputMoneyAmountParameter.DbType = DbType.Decimal;
                    InputMoneyAmountParameter.Precision = 10;
                    InputMoneyAmountParameter.Scale = 2;
                    if (tran.InputMoneyAmount.HasValue)
                    {
                        InputMoneyAmountParameter.Value = tran.InputMoneyAmount.Value;
                    }
                    else
                    {
                        InputMoneyAmountParameter.Value = null;
                    }
                    cmd.Parameters.Add(InputMoneyAmountParameter);

                    DbParameter TotalCostParameter = cmd.CreateParameter();
                    TotalCostParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.TotalCostAmount;
                    TotalCostParameter.Direction = ParameterDirection.Input;
                    TotalCostParameter.DbType = DbType.Decimal;
                    TotalCostParameter.Precision = 10;
                    TotalCostParameter.Scale = 2;
                    if (tran.TotalCostAmount.HasValue)
                    {
                        TotalCostParameter.Value = tran.TotalCostAmount.Value;
                    }
                    else
                    {
                        TotalCostParameter.Value = null;
                    }
                    cmd.Parameters.Add(TotalCostParameter);

                    DbParameter RemarkParameter = cmd.CreateParameter();
                    RemarkParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.Remarks;
                    RemarkParameter.Direction = ParameterDirection.Input;
                    RemarkParameter.DbType = DbType.String;
                    RemarkParameter.Value = tran.Remarks;
                    cmd.Parameters.Add(RemarkParameter);

                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool UpdateTransactions(Transaction tran)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = string.Format(@"{0}.{1}", FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRateFYPStoredProcedure.UpdateTransactions);

                    DbParameter TransactionIDParameter = cmd.CreateParameter();
                    TransactionIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.TransactionID;
                    TransactionIDParameter.Direction = ParameterDirection.Input;
                    TransactionIDParameter.DbType = DbType.Int32;
                    TransactionIDParameter.Precision = 10;
                    TransactionIDParameter.Scale = 0;
                    TransactionIDParameter.Value = tran.TransactionID;
                    cmd.Parameters.Add(TransactionIDParameter);


                    DbParameter FromCountryIDParameter = cmd.CreateParameter();
                    FromCountryIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.FromCountryID;
                    FromCountryIDParameter.Direction = ParameterDirection.Input;
                    FromCountryIDParameter.DbType = DbType.Int32;
                    FromCountryIDParameter.Precision = 10;
                    FromCountryIDParameter.Scale = 0;
                    if (tran.CustomerID.HasValue)
                    {
                        FromCountryIDParameter.Value = tran.CustomerID.Value;
                    }
                    else
                    {
                        FromCountryIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(FromCountryIDParameter);

                    DbParameter ToCountryIDParameter = cmd.CreateParameter();
                    ToCountryIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.ToCountryID;
                    ToCountryIDParameter.Direction = ParameterDirection.Input;
                    ToCountryIDParameter.DbType = DbType.Int32;
                    ToCountryIDParameter.Precision = 10;
                    ToCountryIDParameter.Scale = 0;
                    if (tran.ToCountryID.HasValue)
                    {
                        ToCountryIDParameter.Value = tran.ToCountryID.Value;
                    }
                    else
                    {
                        ToCountryIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(ToCountryIDParameter);

                    DbParameter CustomerIDParameter = cmd.CreateParameter();
                    CustomerIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.CustomerID;
                    CustomerIDParameter.Direction = ParameterDirection.Input;
                    CustomerIDParameter.DbType = DbType.Int32;
                    CustomerIDParameter.Precision = 10;
                    CustomerIDParameter.Scale = 0;
                    if (tran.CustomerID.HasValue)
                    {
                        CustomerIDParameter.Value = tran.CustomerID.Value;
                    }
                    else
                    {
                        CustomerIDParameter.Value = null;
                    }
                    cmd.Parameters.Add(CustomerIDParameter);

                    DbParameter FromCountryRateParameter = cmd.CreateParameter();
                    FromCountryRateParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.FromCountryRate;
                    FromCountryRateParameter.Direction = ParameterDirection.Input;
                    FromCountryRateParameter.DbType = DbType.Decimal;
                    FromCountryRateParameter.Precision = 10;
                    FromCountryRateParameter.Scale = 2;
                    if (tran.FromCountryRate.HasValue)
                    {
                        FromCountryRateParameter.Value = tran.FromCountryRate.Value;
                    }
                    else
                    {
                        FromCountryRateParameter.Value = null;
                    }
                    cmd.Parameters.Add(FromCountryRateParameter);

                    DbParameter ToCountryRateParameter = cmd.CreateParameter();
                    ToCountryRateParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.ToCountryRate;
                    ToCountryRateParameter.Direction = ParameterDirection.Input;
                    ToCountryRateParameter.DbType = DbType.Decimal;
                    ToCountryRateParameter.Precision = 10;
                    ToCountryRateParameter.Scale = 2;
                    if (tran.ToCountryRate.HasValue)
                    {
                        ToCountryRateParameter.Value = tran.ToCountryRate.Value;
                    }
                    else
                    {
                        ToCountryRateParameter.Value = null;
                    }
                    cmd.Parameters.Add(ToCountryRateParameter);

                    DbParameter PaymentMethodParameter = cmd.CreateParameter();
                    PaymentMethodParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.PaymentMethod;
                    PaymentMethodParameter.Direction = ParameterDirection.Input;
                    PaymentMethodParameter.DbType = DbType.String;
                    PaymentMethodParameter.Size = 1000;
                    PaymentMethodParameter.Value = tran.PaymentMethod;

                    DbParameter InputMoneyAmountParameter = cmd.CreateParameter();
                    InputMoneyAmountParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.InputMoneyAmount;
                    InputMoneyAmountParameter.Direction = ParameterDirection.Input;
                    InputMoneyAmountParameter.DbType = DbType.Decimal;
                    InputMoneyAmountParameter.Precision = 10;
                    InputMoneyAmountParameter.Scale = 2;
                    if (tran.InputMoneyAmount.HasValue)
                    {
                        InputMoneyAmountParameter.Value = tran.InputMoneyAmount.Value;
                    }
                    else
                    {
                        InputMoneyAmountParameter.Value = null;
                    }
                    cmd.Parameters.Add(InputMoneyAmountParameter);

                    DbParameter TotalCostParameter = cmd.CreateParameter();
                    TotalCostParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.TotalCostAmount;
                    TotalCostParameter.Direction = ParameterDirection.Input;
                    TotalCostParameter.DbType = DbType.Decimal;
                    TotalCostParameter.Precision = 10;
                    TotalCostParameter.Scale = 2;
                    if (tran.TotalCostAmount.HasValue)
                    {
                        TotalCostParameter.Value = tran.TotalCostAmount.Value;
                    }
                    else
                    {
                        TotalCostParameter.Value = null;
                    }
                    cmd.Parameters.Add(TotalCostParameter);

                    DbParameter IsConfirmedParameter = cmd.CreateParameter();
                    IsConfirmedParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.IsConfirmed;
                    IsConfirmedParameter.Direction = ParameterDirection.Input;
                    IsConfirmedParameter.DbType = DbType.Boolean;
                    if (tran.IsConfirmed.HasValue)
                    {
                        IsConfirmedParameter.Value = tran.IsConfirmed.Value;
                    }
                    else
                    {
                        IsConfirmedParameter.Value = null;
                    }
                    cmd.Parameters.Add(IsConfirmedParameter);

                    DbParameter RemarksParameter = cmd.CreateParameter();
                    ToCountryRateParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.Remarks;
                    ToCountryRateParameter.Direction = ParameterDirection.Input;
                    InputMoneyAmountParameter.DbType = DbType.Decimal;
                    InputMoneyAmountParameter.Precision = 10;
                    InputMoneyAmountParameter.Scale = 2;
                    InputMoneyAmountParameter.Value = tran.Remarks;
                    cmd.Parameters.Add(InputMoneyAmountParameter);

                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool DeleteTransactions(Transaction tran)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = string.Format(@"{0}.{1}",FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.ExchangeRateFYPStoredProcedure.DeleteTransactions);

                    DbParameter TransactionIDParameter = cmd.CreateParameter();
                    TransactionIDParameter.ParameterName = FYPExchangeRateConstant.TransactionColumn.TransactionID;
                    TransactionIDParameter.Direction = ParameterDirection.Input;
                    TransactionIDParameter.DbType = DbType.Int32;
                    TransactionIDParameter.Precision = 10;
                    TransactionIDParameter.Scale = 0;
                    TransactionIDParameter.Value = tran.TransactionID;
                    cmd.Parameters.Add(TransactionIDParameter);
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool ConfirmTransactions(Transaction tran)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"UPDATE {0}.{1} 
                                                      SET {2} = '{3}',
                                                          {4} = '{5}' 
                                                      WHERE {6} = '{7}'", 
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.TransactionTables,
                                                      FYPExchangeRateConstant.TransactionColumn.IsConfirmed, tran.IsConfirmed.Value,
                                                      FYPExchangeRateConstant.TransactionColumn.ModifiedDate, DateTime.Now,
                                                      FYPExchangeRateConstant.TransactionColumn.TransactionID, tran.TransactionID);

                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }

            return result;
        }

        public List<Transaction> SelectAllTransactions()
        {
            List<Transaction> result = new List<Transaction>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"select rate.*, countryFrom.CountryName 'CompanyFrom', countryTo.CountryName 'CompanyTo', customer.Username 'CustomerName' 
                                                      from {0}.{1}(nolocK) rate
                                                      left join {0}.{2}(nolocK) countryFrom on countryFrom.{3} = rate.{4}
                                                      left join {0}.{2}(nolocK) countryTo on countryTo.{3} = rate.{5}
                                                      left join {0}.{6}(nolock) customer on customer.{7} = rate.{8}", 
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.TransactionTables,
                                                      FYPExchangeRateConstant.CountriesTables, FYPExchangeRateConstant.CountriesColumn.CountryID,
                                                      FYPExchangeRateConstant.TransactionColumn.FromCountryID, FYPExchangeRateConstant.TransactionColumn.ToCountryID,
                                                      FYPExchangeRateConstant.UsersTables, FYPExchangeRateConstant.UsersColumn.UserID, FYPExchangeRateConstant.TransactionColumn.CustomerID);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            Transaction row = new Transaction();
                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.TransactionID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.TransactionID)))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.TransactionID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.FromCountryID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.FromCountryID)))
                                row.FromCountryID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.FromCountryID)), typeof(int));
                            else
                                row.FromCountryID = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.ToCountryID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.ToCountryID)))
                                row.ToCountryID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.ToCountryID)), typeof(int));
                            else
                                row.ToCountryID = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.CustomerID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.CustomerID)))
                                row.CustomerID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.CustomerID)), typeof(int));
                            else
                                row.CustomerID = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.FromCountryRate) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.FromCountryRate)))
                                row.FromCountryRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.FromCountryRate)), typeof(decimal));
                            else
                                row.FromCountryRate = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.ToCountryRate) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.ToCountryRate)))
                                row.ToCountryRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.ToCountryRate)), typeof(decimal));
                            else
                                row.ToCountryRate = null;

                            if (fieldNames.Contains("CompanyFrom") && !reader.IsDBNull(reader.GetOrdinal("CompanyFrom")))
                                row.CountryFrom = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CompanyFrom")), typeof(string));

                            if (fieldNames.Contains("CompanyTo") && !reader.IsDBNull(reader.GetOrdinal("CompanyTo")))
                                row.CountryTo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CompanyTo")), typeof(string));


                            if (fieldNames.Contains("CustomerName") && !reader.IsDBNull(reader.GetOrdinal("CustomerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CustomerName")), typeof(string));

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.PaymentMethod) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.PaymentMethod)))
                                row.PaymentMethod = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.PaymentMethod)), typeof(string));
                            else
                                row.PaymentMethod = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.TotalCostAmount) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.TotalCostAmount)))
                                row.TotalCostAmount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.TotalCostAmount)), typeof(decimal));
                            else
                                row.TotalCostAmount = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.InputMoneyAmount) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.InputMoneyAmount)))
                                row.InputMoneyAmount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.InputMoneyAmount)), typeof(decimal));
                            else
                                row.InputMoneyAmount = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.TransactionColumn.IsConfirmed) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.IsConfirmed)))
                                row.IsConfirmed = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.TransactionColumn.IsConfirmed)), typeof(bool));
                            else
                                row.IsConfirmed = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.ExchangeRatesColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public bool UpdateRemainingAmount(Transaction tran, bool IsIncrement)
        {
            bool result = false;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    if (IsIncrement)
                    {
                        cmd.CommandText = string.Format(@"UPDATE {0}.{1} SET {2} = {2} + '{3}', {4} = '{5}', {8}= '{9}' WHERE {6} = '{7}'",
                                                          FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables,
                                                          FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate, tran.InputMoneyAmount,
                                                          FYPExchangeRateConstant.TransactionColumn.ModifiedDate, DateTime.Now,
                                                          FYPExchangeRateConstant.CountriesColumn.CountryID, tran.FromCountryID,
                                                          FYPExchangeRateConstant.CountriesColumn.Remarks, string.Format("Update from Transaction ID : {0}",tran.TransactionID));
                    }
                    else
                    {
                        cmd.CommandText = string.Format(@"UPDATE {0}.{1} SET {2} = {2} - '{3}', {4} = '{5}', {8}= '{9}' WHERE {6} = '{7}'",
                                  FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.CountriesTables,
                                  FYPExchangeRateConstant.CountriesColumn.CurrentCurrencyRate, tran.TotalCostAmount,
                                  FYPExchangeRateConstant.TransactionColumn.ModifiedDate, DateTime.Now,
                                  FYPExchangeRateConstant.CountriesColumn.CountryID, tran.ToCountryID,
                                  FYPExchangeRateConstant.CountriesColumn.Remarks, string.Format("Update from Transaction ID : {0}", tran.TransactionID));
                    }
                    cmd.ExecuteNonQuery();
                    result = true;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }

            return result;
        }

        #endregion

        #region Enquiry Collections

        public List<Enquiry> SelectMessage(int MessageID)
        {
            List<Enquiry> result = new List<Enquiry>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"select enquiry.*, customer.Username 'CustomerName', createdby.Username 'CreatedName'
                                                      from {0}.{1}(nolocK) enquiry
                                                      left join {0}.{2}(nolock) customer on customer.{3} = enquiry.{4}
                                                      left join {0}.{2}(nolock) createdby on createdby.{3} = enquiry.{5}",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.EnquiryTables,
                                                      FYPExchangeRateConstant.UsersTables, FYPExchangeRateConstant.UsersColumn.UserID, FYPExchangeRateConstant.EnquiryColumn.CustomerID,
                                                      FYPExchangeRateConstant.UsersColumn.CreatedBy);

                    if (MessageID >0)
                    {
                        cmd.CommandText += string.Format(" WHERE enquiry.{0} = {1}", FYPExchangeRateConstant.EnquiryColumn.MessageID, MessageID);
                    }

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            Enquiry row = new Enquiry();

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.TransactionID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.TransactionID)))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.TransactionID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject)))
                                row.EnquirySubject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject)), typeof(string));
                            else
                                row.EnquirySubject = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.EnquiryMessage) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquiryMessage)))
                                row.EnquiryMessage = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquiryMessage)), typeof(string));
                            else
                                row.EnquiryMessage = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.MessageID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.MessageID)))
                                row.MessageID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.MessageID)), typeof(int));
                            else
                                row.MessageID = null;


                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.CustomerID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.CustomerID)))
                                row.CustomerID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.CustomerID)), typeof(int));
                            else
                                row.CustomerID = null;

                            if (fieldNames.Contains("CustomerName") && !reader.IsDBNull(reader.GetOrdinal("CustomerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CustomerName")), typeof(string));


                            if (fieldNames.Contains("CreatedName") && !reader.IsDBNull(reader.GetOrdinal("CreatedName")))
                                row.CreatedName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CreatedName")), typeof(string));

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.IsActive) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.IsActive)))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.IsActive)), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            if (fieldNames.Contains("ModifiedDate") && !reader.IsDBNull(reader.GetOrdinal("ModifiedDate")))
                                row.ModifiedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ModifiedDate")), typeof(System.DateTime));
                            else
                                row.ModifiedDate = null;
                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<Enquiry> SelectEnquiries(int? CustomerID)
        {
            List<Enquiry> result = new List<Enquiry>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = string.Format(@"select distinct enquiry.MessageID, enquiry.EnquirySubject,enquiry.CustomerID,enquiry.TransactionID, customer.Username 'CustomerName'
                                                      from {0}.{1}(nolocK) enquiry
                                                      left join {0}.{2}(nolock) customer on customer.{3} = enquiry.{4}",
                                                      FYPExchangeRateConstant.ExchangeRateFYPSchema, FYPExchangeRateConstant.EnquiryTables,
                                                      FYPExchangeRateConstant.UsersTables, FYPExchangeRateConstant.UsersColumn.UserID, FYPExchangeRateConstant.EnquiryColumn.CustomerID);

                    if (CustomerID.HasValue)
                    {
                        cmd.CommandText += string.Format(" WHERE enquiry.{0} = {1}", FYPExchangeRateConstant.EnquiryColumn.CustomerID, CustomerID); 
                    }

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            Enquiry row = new Enquiry();

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.TransactionID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.TransactionID)))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.TransactionID)), typeof(int));

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject)))
                                row.EnquirySubject = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.EnquirySubject)), typeof(string));
                            else
                                row.EnquirySubject = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.MessageID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.MessageID)))
                                row.MessageID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.MessageID)), typeof(int));
                            else
                                row.MessageID = null;

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.CustomerID) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.CustomerID)))
                                row.CustomerID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.CustomerID)), typeof(int));
                            else
                                row.CustomerID = null;

                            if (fieldNames.Contains("CustomerName") && !reader.IsDBNull(reader.GetOrdinal("CustomerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CustomerName")), typeof(string));


                            if (fieldNames.Contains("CreatedName") && !reader.IsDBNull(reader.GetOrdinal("CreatedName")))
                                row.CreatedName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal("CreatedName")), typeof(string));

                            if (fieldNames.Contains(FYPExchangeRateConstant.EnquiryColumn.Remarks) && !reader.IsDBNull(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.Remarks)))
                                row.Remarks = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(FYPExchangeRateConstant.EnquiryColumn.Remarks)), typeof(string));
                            else
                                row.Remarks = null;

                            if (fieldNames.Contains("CreatedDate") && !reader.IsDBNull(reader.GetOrdinal("CreatedDate")))
                                row.CreatedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreatedDate")), typeof(System.DateTime));
                            else
                                row.CreatedDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void InsertEnquiry(string EnquirySubject, int? MessageID, string EnquiryMessage, int? CustomerID, int? TransactionID, string Remarks, int? CreatedBy)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"ExchangeRateFYP.InsertEnquiries";

                    DbParameter EnquirySubjectParameter = cmd.CreateParameter();
                    EnquirySubjectParameter.ParameterName = "EnquirySubject";
                    EnquirySubjectParameter.Direction = ParameterDirection.Input;
                    EnquirySubjectParameter.DbType = DbType.String;
                    EnquirySubjectParameter.Size = 1000;
                    if (EnquirySubject != null)
                    {
                        EnquirySubjectParameter.Value = EnquirySubject;
                    }
                    else
                    {
                        EnquirySubjectParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EnquirySubjectParameter);

                    DbParameter MessageIDParameter = cmd.CreateParameter();
                    MessageIDParameter.ParameterName = "MessageID";
                    MessageIDParameter.Direction = ParameterDirection.Input;
                    MessageIDParameter.DbType = DbType.Int32;
                    MessageIDParameter.Precision = 10;
                    MessageIDParameter.Scale = 0;
                    if (MessageID.HasValue)
                    {
                        MessageIDParameter.Value = MessageID.Value;
                    }
                    else
                    {
                        MessageIDParameter.Size = -1;
                        MessageIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(MessageIDParameter);

                    DbParameter EnquiryMessageParameter = cmd.CreateParameter();
                    EnquiryMessageParameter.ParameterName = "EnquiryMessage";
                    EnquiryMessageParameter.Direction = ParameterDirection.Input;
                    EnquiryMessageParameter.DbType = DbType.String;
                    EnquiryMessageParameter.Size = 2000;
                    if (EnquiryMessage != null)
                    {
                        EnquiryMessageParameter.Value = EnquiryMessage;
                    }
                    else
                    {
                        EnquiryMessageParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EnquiryMessageParameter);

                    DbParameter CustomerIDParameter = cmd.CreateParameter();
                    CustomerIDParameter.ParameterName = "CustomerID";
                    CustomerIDParameter.Direction = ParameterDirection.Input;
                    CustomerIDParameter.DbType = DbType.Int32;
                    CustomerIDParameter.Precision = 10;
                    CustomerIDParameter.Scale = 0;
                    if (CustomerID.HasValue)
                    {
                        CustomerIDParameter.Value = CustomerID.Value;
                    }
                    else
                    {
                        CustomerIDParameter.Size = -1;
                        CustomerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CustomerIDParameter);

                    DbParameter TransactionIDParameter = cmd.CreateParameter();
                    TransactionIDParameter.ParameterName = "TransactionID";
                    TransactionIDParameter.Direction = ParameterDirection.Input;
                    TransactionIDParameter.DbType = DbType.Int32;
                    TransactionIDParameter.Precision = 10;
                    TransactionIDParameter.Scale = 0;
                    if (TransactionID.HasValue)
                    {
                        TransactionIDParameter.Value = TransactionID.Value;
                    }
                    else
                    {
                        TransactionIDParameter.Size = -1;
                        TransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TransactionIDParameter);

                    DbParameter RemarksParameter = cmd.CreateParameter();
                    RemarksParameter.ParameterName = "Remarks";
                    RemarksParameter.Direction = ParameterDirection.Input;
                    RemarksParameter.DbType = DbType.String;
                    RemarksParameter.Size = 1000;
                    if (Remarks != null)
                    {
                        RemarksParameter.Value = Remarks;
                    }
                    else
                    {
                        RemarksParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RemarksParameter);

                    DbParameter CreatedByParameter = cmd.CreateParameter();
                    CreatedByParameter.ParameterName = "CreatedBy";
                    CreatedByParameter.Direction = ParameterDirection.Input;
                    CreatedByParameter.DbType = DbType.Int32;
                    CreatedByParameter.Precision = 10;
                    CreatedByParameter.Scale = 0;
                    if (CreatedBy.HasValue)
                    {
                        CreatedByParameter.Value = CreatedBy.Value;
                    }
                    else
                    {
                        CreatedByParameter.Size = -1;
                        CreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CreatedByParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }
        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ExchangeRate>().HasOne(x => x.Country_FromCountryID).WithMany(op => op.ExchangeRates_FromCountryID).IsRequired(false).HasForeignKey(@"FromCountryID");
            modelBuilder.Entity<ExchangeRate>().HasOne(x => x.Country_ToCountryID).WithMany(op => op.ExchangeRates_ToCountryID).IsRequired(false).HasForeignKey(@"ToCountryID");

            modelBuilder.Entity<Transaction>().HasOne(x => x.Country_FromCountryID).WithMany(op => op.Transactions_FromCountryID).IsRequired(false).HasForeignKey(@"FromCountryID");
            modelBuilder.Entity<Transaction>().HasOne(x => x.Country_ToCountryID).WithMany(op => op.Transactions_ToCountryID).IsRequired(false).HasForeignKey(@"ToCountryID");
            modelBuilder.Entity<Transaction>().HasOne(x => x.User).WithMany(op => op.Transactions).IsRequired(false).HasForeignKey(@"CustomerID");

            modelBuilder.Entity<Enquiry>().HasOne(x => x.User).WithMany(op => op.Enquiries).IsRequired(false).HasForeignKey(@"CustomerID");
            modelBuilder.Entity<Enquiry>().HasOne(x => x.Transaction).WithMany(op => op.Enquiries).IsRequired(false).HasForeignKey(@"TransactionID");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
